;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "clear" "(reset)" "(go)" "(reset)" "(refresh-all)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(in-ns 'user) (reset)" "(in-ns 'user) (refresh-all)" "(in-ns 'user)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(reset!)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "*1" "(refresh-all)" "(go)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(go)" "(stop)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(Reset)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(stop)" "(reset)" "(go)" "(refresh-all)" "(go)" "(refresh-all)" "(go)" "(reset)" "(go)" "(refresh-all)" "(go)" "(refresh-all)" "(go)" "(refresh-all)" "(go)" "*e" "(go)" "(refresh-all)" "*e" "(go)" "(reset)" "*e" "(go)" "(reset)" "(refresh-all)" "(reset)" "(rset)" "(reset)" "(go)" "(offset-date-time string-time)" "(def string-time \"2019-05-25T07:55:41.173+00:00\")" "(offset-date-time string-time)" "(def string-time \"2019-05-25T07:55:41.173+0000\")" "(use 'java-time)" "(refer-clojure :exclude [range iterate format max min])" "(use 'java-time)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(go)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "d" "(reset)" "(go)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(go)" "(exit)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(stop)" "(refresh-all)" "(stop)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(stop)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "ls" "(reset)" "(refresh-all)" "(reset)" "(go)" "(refresh-all)" "(go)" "(refresh-all)" "(go)" "(stop)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(do (refresh-all) (reset))" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(reset)" "(refresh-all)" "(refreshall)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(refresh-all)" "(reset)" "(Reset)" "(reset)" "(go)" "(stop)" "(reset)" "(refresh-all)" "(go)" "(refresh-all)" "(reset)" "(go)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(go)" "(start)" "(refresh-all)" "(stop)" "(refresh-all)" "(stop)" "(reset)" "(start)" "(stop)" "(refresh-all)" "(reset)" "(refresh-all)" "(go)" "(stop)" "(refresh-all)" "(stop)" "(reset)" "(refresh-all)" "(reset)" "(go)" "(reset)" "(go)" "(reset)" "(go)" "(stop)" "(start)" "(reset)" "(stop)" "(refresh-all)" "(refresh)" "(start)" "(stop)" "(start)" "(refresh)" "(refresh-all)" "(stop)" "(start)" "(refresh)" "(refresh-all)" "(refresh)" "(require '[clojure.tools.namespace.repl :refer [refresh]])" "(use 'user :reload-all)" "(use user :reload-all)" "(stop)" "(start)" "(stop)" "(start)" "qualified-ident?")